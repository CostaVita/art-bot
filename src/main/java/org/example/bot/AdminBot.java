package org.example.bot;

import org.example.config.BotConfig;
import org.example.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.ForwardMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Component
public class AdminBot extends TelegramLongPollingBot {
    
    private static final Logger logger = LoggerFactory.getLogger(AdminBot.class);
    
    @Autowired
    private BotConfig botConfig;
    
    @Autowired
    private UserService userService;

    private String botToken;
    private String botUsername;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞
    private Long pendingMediaTargetUserId = null;
    
    public void setBotToken(String botToken) {
        this.botToken = botToken;
    }
    
    public void setBotUsername(String botUsername) {
        this.botUsername = botUsername;
    }
    
    @Override
    public String getBotToken() {
        return botToken;
    }
    
    @Override
    public String getBotUsername() {
        return botUsername;
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        try {
            logger.info("Received update: {}", update.getUpdateId());
            
            if (update.hasMessage()) {
                Message message = update.getMessage();
                User user = message.getFrom();
                
                logger.info("Message from user {} ({}): {}", 
                    user.getId(), 
                    user.getUserName() != null ? "@" + user.getUserName() : "no username",
                    message.hasText() ? message.getText() : "non-text message"
                );
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                userService.addOrUpdateUser(
                    user.getId(),
                    user.getUserName(),
                    user.getFirstName(),
                    user.getLastName()
                );
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if (message.hasText() && message.getText().startsWith("/")) {
                    handleCommand(message);
                } else {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    handleMessage(message);
                }
            }
        } catch (Exception e) {
            logger.error("Error processing update: ", e);
        }
    }
    
    private void handleCommand(Message message) {
        String command = message.getText().split(" ")[0].toLowerCase();
        User user = message.getFrom();
        
        switch (command) {
            case "/start":
                handleStart(message);
                break;
            case "/help":
                handleHelp(message);
                break;
            case "/reply":
                if (isAdmin(user.getId())) {
                    handleAdminReply(message);
                } else {
                    sendMessage(message.getChatId(), botConfig.getMessages().getUnauthorized());
                }
                break;
            case "/users":
                if (isAdmin(user.getId())) {
                    handleUsersList(message);
                } else {
                    sendMessage(message.getChatId(), botConfig.getMessages().getUnauthorized());
                }
                break;
            default:
                sendMessage(message.getChatId(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
        }
    }
    
    private void handleStart(Message message) {
        try {
            SendMessage welcomeMessage = new SendMessage();
            welcomeMessage.setChatId(message.getChatId().toString());
            welcomeMessage.setText("üñºÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞—Ä—Ç-–º–∞—Å—Ç–µ—Ä—Å–∫—É—é!*\n\n–Ø —Å–æ–∑–¥–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã ‚Äî –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:\n\n1. üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É\n2. üé® –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–∞—Ä—Ç–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—à –∏–Ω—Ç–µ—Ä—å–µ—Ä\n3. üöö –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω—ã –¥–æ –¥–≤–µ—Ä–∏ –∑–∞ 2 –¥–Ω—è!\n\n‚ú® *–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*\n- –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã (–æ–±—â–∏–π –ø–ª–∞–Ω –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏)\n- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n- –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—Ç–∏–Ω\n\nüì¨ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä?");
            welcomeMessage.enableMarkdown(true);
            execute(welcomeMessage);
        } catch (TelegramApiException e) {
            logger.error("Error sending welcome message: {}", e.getMessage());
        }
        logger.info("User {} ({}) started the bot", message.getFrom().getId(), message.getFrom().getUserName());
    }
    
    private void handleHelp(Message message) {
        sendMessage(message.getChatId(), "üñºÔ∏è *–ê—Ä—Ç-–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è - –°–ø—Ä–∞–≤–∫–∞*\n\n*–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:*\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã\nüí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n\n*–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n/reply <ID> <—Ç–µ–∫—Å—Ç> - –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n/users - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\nüé® –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞!");
    }
    
    private void handleMessage(Message message) {
        User user = message.getFrom();
        Long userId = user.getId();
        
        logger.info("Processing message from user {} (admin: {})", userId, isAdmin(userId));
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (isAdmin(userId)) {
            logger.info("Admin message detected, handling as admin message");
            handleAdminMessage(message);
            return;
        }
        
        // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            List<Long> adminIds = botConfig.getAdminIdsAsLong();
            
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é
            if (message.hasPhoto() || message.hasVideo() || message.hasDocument() || 
                message.hasVoice() || message.hasAudio() || message.hasSticker()) {
                
                logger.info("Forwarding media from user {} to {} admins", userId, adminIds.size());
                for (Long adminId : adminIds) {
                    forwardMessage(adminId, message);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    String userInfo = formatUserInfoForAdmin(message);
                    sendMessage(adminId, userInfo);
                }
                
            } else {
                // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                String adminMessage = formatUserMessageForAdmin(message);
                logger.info("Forwarding text message to {} admins: {}", adminIds.size(), adminMessage.substring(0, Math.min(100, adminMessage.length())));
                for (Long adminId : adminIds) {
                    sendMessage(adminId, adminMessage);
                }
            }
            
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info("Message from user {} forwarded to {} admins", userId, adminIds.size());
        } catch (Exception e) {
            logger.error("Error forwarding message to admins: ", e);
            sendMessage(message.getChatId(), "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    
    private void handleAdminMessage(Message message) {
        logger.info("Handling admin message: {}", message.hasText() ? message.getText() : "media message");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π –º–µ–¥–∏–∞ —Ñ–∞–π–ª
        if (pendingMediaTargetUserId != null && (message.hasPhoto() || message.hasVideo() || 
            message.hasDocument() || message.hasVoice() || message.hasAudio() || message.hasSticker())) {
            
            logger.info("Sending admin media to user {}", pendingMediaTargetUserId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            sendMediaToUser(pendingMediaTargetUserId, message);
            
            sendMessage(message.getChatId(), "‚úÖ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + pendingMediaTargetUserId);
            pendingMediaTargetUserId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if (message.isReply()) {
            logger.info("Admin reply message detected");
            Message repliedMessage = message.getReplyToMessage();
            if (repliedMessage != null) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                String text = repliedMessage.getText();
                if (text != null && text.contains("ID: `")) {
                    String userIdStr = text.split("ID: `")[1].split("`")[0];
                    try {
                        Long targetUserId = Long.parseLong(userIdStr);
                        String replyText = message.getText();
                        sendMessage(targetUserId, replyText);
                        sendMessage(message.getChatId(), "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                        logger.info("Reply sent to user {}", targetUserId);
                    } catch (NumberFormatException e) {
                        sendMessage(message.getChatId(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                        logger.error("Failed to parse user ID from reply");
                    }
                }
            }
        } else {
            logger.info("Admin sent regular message (not a reply)");
            String adminResponse = "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞—Ä—Ç-–º–∞—Å—Ç–µ—Ä—Å–∫–æ–π. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
            sendMessage(message.getChatId(), adminResponse);
        }
    }
    
    private void handleAdminReply(Message message) {
        String[] parts = message.getText().split(" ", 2);
        if (parts.length < 2) {
            sendMessage(message.getChatId(), "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> [—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞]");
            return;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ ID
            if (parts[1].contains(" ")) {
                // –ï—Å—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: /reply 153359354 –ü—Ä–∏–≤–µ—Ç
                String[] textParts = parts[1].split(" ", 2);
                Long targetUserId = Long.parseLong(textParts[0]);
                String replyText = textParts[1];
                sendMessage(targetUserId, replyText);
                sendMessage(message.getChatId(), "‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
            } else {
                // –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞: /reply 153359354 - –∂–¥–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª
                Long targetUserId = Long.parseLong(parts[1]);
                pendingMediaTargetUserId = targetUserId;
                sendMessage(message.getChatId(), "üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + targetUserId);
            }
            
        } catch (NumberFormatException e) {
            sendMessage(message.getChatId(), "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    }
    
    private void handleUsersList(Message message) {
        Map<Long, org.example.model.User> users = userService.getAllActiveUsers();
        List<Long> adminIds = botConfig.getAdminIdsAsLong();
        
        if (users.isEmpty()) {
            sendMessage(message.getChatId(), "üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç");
            return;
        }
        
        StringBuilder sb = new StringBuilder("üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n");
        for (org.example.model.User user : users.values()) {
            sb.append(String.format("üë§ %s\n", user.getFullName()));
            sb.append(String.format("üÜî ID: %d\n", user.getId()));
            if (user.getUsername() != null) {
                sb.append(String.format("üë§ Username: @%s\n", user.getUsername()));
            }
            sb.append(String.format("üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %s\n", user.getLastActivity()));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            if (adminIds.contains(user.getId())) {
                sb.append("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n");
            }
            sb.append("\n");
        }
        
        sendMessage(message.getChatId(), sb.toString());
    }
    
    private String formatUserMessageForAdmin(Message message) {
        User user = message.getFrom();
        StringBuilder sb = new StringBuilder();
        
        sb.append("üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n");
        sb.append(String.format("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "")));
        sb.append(String.format("üÜî ID: %d\n", user.getId()));
        sb.append(String.format("üë§ Username: @%s\n\n", user.getUserName() != null ? user.getUserName() : "–ù–µ—Ç username"));
        
        if (message.hasText()) {
            sb.append("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n");
            sb.append(message.getText());
        } else if (message.hasPhoto()) {
            sb.append("üì∑ –§–æ—Ç–æ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasVideo()) {
            sb.append("üé• –í–∏–¥–µ–æ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasDocument()) {
            sb.append("üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ").append(message.getDocument().getFileName());
        } else if (message.hasVoice()) {
            sb.append("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        } else if (message.hasAudio()) {
            sb.append("üéµ –ê—É–¥–∏–æ");
        } else if (message.hasSticker()) {
            sb.append("üòÄ –°—Ç–∏–∫–µ—Ä");
        } else {
            sb.append("üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª");
        }
        
        return sb.toString();
    }
    
    private boolean isAdmin(Long userId) {
        List<Long> adminIds = botConfig.getAdminIdsAsLong();
        boolean isAdmin = adminIds.contains(userId);
        logger.debug("Checking if user {} is admin. Admin IDs: {}. Result: {}", userId, adminIds, isAdmin);
        return isAdmin;
    }
    
    private void sendMessage(Long chatId, String text) {
        try {
            logger.debug("Sending message to {}: '{}'", chatId, text);
            
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId.toString());
            sendMessage.setText(text);
            sendMessage.enableMarkdown(false);
            sendMessage.enableHtml(false);
            execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.error("Error sending message to {}: {}", chatId, e.getMessage());
        }
    }
    
    private void forwardMessage(Long chatId, Message message) {
        try {
            logger.debug("Forwarding message {} to {}", message.getMessageId(), chatId);
            
            ForwardMessage forwardMessage = new ForwardMessage();
            forwardMessage.setChatId(chatId.toString());
            forwardMessage.setFromChatId(message.getChatId().toString());
            forwardMessage.setMessageId(message.getMessageId());
            execute(forwardMessage);
        } catch (TelegramApiException e) {
            logger.error("Error forwarding message to {}: {}", chatId, e.getMessage());
        }
    }
    
    private void sendMediaToUser(Long chatId, Message message) {
        try {
            logger.debug("Sending media to {}", chatId);
            
            if (message.hasPhoto()) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                org.telegram.telegrambots.meta.api.methods.send.SendPhoto sendPhoto = 
                    new org.telegram.telegrambots.meta.api.methods.send.SendPhoto();
                sendPhoto.setChatId(chatId.toString());
                org.telegram.telegrambots.meta.api.objects.InputFile inputFile = 
                    new org.telegram.telegrambots.meta.api.objects.InputFile();
                inputFile.setMedia(message.getPhoto().get(0).getFileId());
                sendPhoto.setPhoto(inputFile);
                if (message.getCaption() != null) {
                    sendPhoto.setCaption(message.getCaption());
                }
                execute(sendPhoto);
                
            } else if (message.hasVideo()) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                org.telegram.telegrambots.meta.api.methods.send.SendVideo sendVideo = 
                    new org.telegram.telegrambots.meta.api.methods.send.SendVideo();
                sendVideo.setChatId(chatId.toString());
                org.telegram.telegrambots.meta.api.objects.InputFile inputFile = 
                    new org.telegram.telegrambots.meta.api.objects.InputFile();
                inputFile.setMedia(message.getVideo().getFileId());
                sendVideo.setVideo(inputFile);
                if (message.getCaption() != null) {
                    sendVideo.setCaption(message.getCaption());
                }
                execute(sendVideo);
                
            } else if (message.hasDocument()) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                org.telegram.telegrambots.meta.api.methods.send.SendDocument sendDocument = 
                    new org.telegram.telegrambots.meta.api.methods.send.SendDocument();
                sendDocument.setChatId(chatId.toString());
                org.telegram.telegrambots.meta.api.objects.InputFile inputFile = 
                    new org.telegram.telegrambots.meta.api.objects.InputFile();
                inputFile.setMedia(message.getDocument().getFileId());
                sendDocument.setDocument(inputFile);
                if (message.getCaption() != null) {
                    sendDocument.setCaption(message.getCaption());
                }
                execute(sendDocument);
                
            } else if (message.hasVoice()) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                org.telegram.telegrambots.meta.api.methods.send.SendVoice sendVoice = 
                    new org.telegram.telegrambots.meta.api.methods.send.SendVoice();
                sendVoice.setChatId(chatId.toString());
                org.telegram.telegrambots.meta.api.objects.InputFile inputFile = 
                    new org.telegram.telegrambots.meta.api.objects.InputFile();
                inputFile.setMedia(message.getVoice().getFileId());
                sendVoice.setVoice(inputFile);
                if (message.getCaption() != null) {
                    sendVoice.setCaption(message.getCaption());
                }
                execute(sendVoice);
                
            } else if (message.hasAudio()) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
                org.telegram.telegrambots.meta.api.methods.send.SendAudio sendAudio = 
                    new org.telegram.telegrambots.meta.api.methods.send.SendAudio();
                sendAudio.setChatId(chatId.toString());
                org.telegram.telegrambots.meta.api.objects.InputFile inputFile = 
                    new org.telegram.telegrambots.meta.api.objects.InputFile();
                inputFile.setMedia(message.getAudio().getFileId());
                sendAudio.setAudio(inputFile);
                if (message.getCaption() != null) {
                    sendAudio.setCaption(message.getCaption());
                }
                execute(sendAudio);
                
            } else if (message.hasSticker()) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                org.telegram.telegrambots.meta.api.methods.send.SendSticker sendSticker = 
                    new org.telegram.telegrambots.meta.api.methods.send.SendSticker();
                sendSticker.setChatId(chatId.toString());
                org.telegram.telegrambots.meta.api.objects.InputFile inputFile = 
                    new org.telegram.telegrambots.meta.api.objects.InputFile();
                inputFile.setMedia(message.getSticker().getFileId());
                sendSticker.setSticker(inputFile);
                execute(sendSticker);
            }
            
        } catch (TelegramApiException e) {
            logger.error("Error sending media to {}: {}", chatId, e.getMessage());
        }
    }
    
    private String formatUserInfoForAdmin(Message message) {
        User user = message.getFrom();
        StringBuilder sb = new StringBuilder();
        
        sb.append("üì® –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n");
        sb.append(String.format("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "")));
        sb.append(String.format("üÜî ID: %d\n", user.getId()));
        sb.append(String.format("üë§ Username: @%s\n", user.getUserName() != null ? user.getUserName() : "–ù–µ—Ç username"));
        
        if (message.hasPhoto()) {
            sb.append("üì∑ –§–æ—Ç–æ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasVideo()) {
            sb.append("üé• –í–∏–¥–µ–æ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasDocument()) {
            sb.append("üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ").append(message.getDocument().getFileName());
        } else if (message.hasVoice()) {
            sb.append("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        } else if (message.hasAudio()) {
            sb.append("üéµ –ê—É–¥–∏–æ");
        } else if (message.hasSticker()) {
            sb.append("üòÄ –°—Ç–∏–∫–µ—Ä");
        } else {
            sb.append("üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª");
        }
        
        return sb.toString();
    }
    
    private String formatMediaInfoForUser(Message message) {
        StringBuilder sb = new StringBuilder();
        sb.append("");
        
        if (message.hasPhoto()) {
            sb.append("üì∑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasVideo()) {
            sb.append("üé• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasDocument()) {
            sb.append("üìÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç: ").append(message.getDocument().getFileName());
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasVoice()) {
            sb.append("üé§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasAudio()) {
            sb.append("üéµ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ");
            if (message.getCaption() != null) {
                sb.append("\nüí¨ –ü–æ–¥–ø–∏—Å—å: ").append(message.getCaption());
            }
        } else if (message.hasSticker()) {
            sb.append("üòÄ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä");
        } else {
            sb.append("üìé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞ —Ñ–∞–π–ª");
        }
        
        return sb.toString();
    }
} 